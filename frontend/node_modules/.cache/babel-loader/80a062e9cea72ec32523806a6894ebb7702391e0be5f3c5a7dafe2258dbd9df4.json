{"ast":null,"code":"// services/apiClient.js\nimport axios from \"axios\";\n\n// Tạo axios instance\nconst apiClient = axios.create({\n  baseURL: \"http://localhost:8080/v1\",\n  withCredentials: true // Nếu refresh token sử dụng cookie\n});\n\n// Interceptor để tự động refresh token khi gặp lỗi 401\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // Nếu có callback navigate, thì khi không thể refresh token, sẽ gọi navigate\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Đánh dấu để tránh lặp vô hạn\n\n    try {\n      // Gọi API làm mới token\n      const response = await axios.post(\"/Users/refresh_token\", {}, {\n        baseURL: \"http://localhost:8080/v1\",\n        withCredentials: true\n      });\n      if (response.data.newToken) {\n        const newAccessToken = response.data.newToken;\n        localStorage.setItem(\"userToken\", newAccessToken);\n        originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\n\n        // Gửi lại request với token mới\n        return apiClient(originalRequest);\n      }\n    } catch (refreshError) {\n      console.error(\"Không thể làm mới token:\", refreshError);\n\n      // Nếu không làm mới được, nên đăng xuất\n      localStorage.removeItem(\"userToken\");\n      localStorage.removeItem('userRole');\n      window.location.href = \"/signin\";\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","withCredentials","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","post","data","newToken","newAccessToken","localStorage","setItem","headers","refreshError","console","removeItem","window","location","href","Promise","reject"],"sources":["D:/study hard/web/ShopWeb/frontend/src/services/api.js"],"sourcesContent":["// services/apiClient.js\r\nimport axios from \"axios\";\r\n\r\n// Tạo axios instance\r\nconst apiClient = axios.create({\r\n    baseURL: \"http://localhost:8080/v1\",\r\n    withCredentials: true, // Nếu refresh token sử dụng cookie\r\n});\r\n\r\n// Interceptor để tự động refresh token khi gặp lỗi 401\r\napiClient.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // Nếu có callback navigate, thì khi không thể refresh token, sẽ gọi navigate\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true; // Đánh dấu để tránh lặp vô hạn\r\n\r\n            try {\r\n                // Gọi API làm mới token\r\n                const response = await axios.post(\r\n                    \"/Users/refresh_token\",\r\n                    {},\r\n                    { baseURL: \"http://localhost:8080/v1\", withCredentials: true }\r\n                );\r\n\r\n                if (response.data.newToken) {\r\n                    const newAccessToken = response.data.newToken;\r\n                    localStorage.setItem(\"userToken\", newAccessToken);\r\n                    originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n\r\n                    // Gửi lại request với token mới\r\n                    return apiClient(originalRequest);\r\n                }\r\n            } catch (refreshError) {\r\n                console.error(\"Không thể làm mới token:\", refreshError);\r\n\r\n                // Nếu không làm mới được, nên đăng xuất\r\n                localStorage.removeItem(\"userToken\");\r\n                localStorage.removeItem('userRole');\r\n                window.location.href = \"/signin\"; \r\n                \r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default apiClient;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,0BAA0B;EACnCC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC9BD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACb,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAAM;;EAEpC;EACA,IAAI,EAAAF,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,IAAI,CAACF,eAAe,CAACG,MAAM,EAAE;IAC3DH,eAAe,CAACG,MAAM,GAAG,IAAI,CAAC,CAAC;;IAE/B,IAAI;MACA;MACA,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACc,IAAI,CAC7B,sBAAsB,EACtB,CAAC,CAAC,EACF;QAAEX,OAAO,EAAE,0BAA0B;QAAEC,eAAe,EAAE;MAAK,CACjE,CAAC;MAED,IAAIE,QAAQ,CAACS,IAAI,CAACC,QAAQ,EAAE;QACxB,MAAMC,cAAc,GAAGX,QAAQ,CAACS,IAAI,CAACC,QAAQ;QAC7CE,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,cAAc,CAAC;QACjDP,eAAe,CAACU,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,cAAc,EAAE;;QAErE;QACA,OAAOhB,SAAS,CAACS,eAAe,CAAC;MACrC;IACJ,CAAC,CAAC,OAAOW,YAAY,EAAE;MACnBC,OAAO,CAACd,KAAK,CAAC,0BAA0B,EAAEa,YAAY,CAAC;;MAEvD;MACAH,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;MACpCL,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;MACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,SAAS;MAEhC,OAAOC,OAAO,CAACC,MAAM,CAACpB,KAAK,CAAC;IAChC;EACJ;EAEA,OAAOmB,OAAO,CAACC,MAAM,CAACpB,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeP,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}